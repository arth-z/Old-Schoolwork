#BlueJ class context
comment0.target=Entity
comment0.text=\r\n\ The\ abstract\ superclass\ for\ the\ moving\ entities\ in\ the\ world.\r\n\ As\ an\ abstract\ superclass,\ it\ contains\ many\ different\ methods\ that\ are\ useful\ in\ its\ subclasses,\ but\ its\ act()\r\n\ method\ is\ comparatively\ barebones.\ \r\n\ \r\n\ All\ entities\ namely\ have\:\r\n\ \ -\ Health\ (and\ a\ corresponding\ bar)\r\n\ \ -\ Velocity\ (direction\ and\ speed)\r\n\ \ -\ Sprites,\ or\ multiple\ images\ as\ opposed\ to\ one\ fixed\ one.\r\n\ \ \r\n\ Additional\ functionalities\ and\ implementations\ are\ included\ in\ the\ subclasses.\r\n\ \r\n\ @author\ Arthur\ Zeng\ and\ Michael\ Liu\r\n\ @version\ Final\r\n
comment1.params=speed\ maxHp\ direction
comment1.target=Entity(int,\ int,\ int)
comment1.text=\r\n\ The\ constructor\ for\ the\ Entity\ class\ mostly\ facilitates\ the\ intialisation\ of\ the\ classes'\ many\ fields.\r\n\ Timers\ are\ set\ to\ 0\ (checkTimer\ to\ 5),\ corresponding\ parameters\ are\ set\ to\ the\ appropriate\ field,\ and\ the\ statBar\ is\ intialised.\r\n\ \r\n\ @param\ speed\ \ \ \ \ \ \ \ \ the\ current\ and\ max\ speed\ of\ the\ Entity\ to\ be\ initialised.\r\n\ @param\ maxHP\ \ \ \ \ \ \ \ \ the\ maximum\ health\ of\ the\ Entity.\r\n\ @param\ direction\ \ \ \ \ Either\ 1\ (right),\ -1\ (left),\ 2\ (up),\ or\ -2\ (down),\ determining\ the\ direction\ of\ the\ entity\ upon\ initial\ spawning\r\n
comment10.params=
comment10.target=void\ act()
comment10.text=\r\n\ Act\ -\ essentially,\ enable\ the\ movement\ of\ entities\ by\ calling\ walk().\ This\ method\ is\ called\ whenever\r\n\ the\ 'Act'\ or\ 'Run'\ button\ gets\ pressed\ in\ the\ environment.\r\n
comment11.params=
comment11.target=void\ deathCheck()
comment11.text=\r\n\ A\ method\ meant\ to\ be\ called\ in\ act(),\ which\ checks\ if\ the\ entity's\ health\ is\ lower\ or\ equal\ to\ zero,\ and\ kills\ them\ if\ it\ is.\r\n
comment12.params=
comment12.target=void\ checkCollision()
comment12.text=\r\n\ A\ timer-based\ implementation\ of\ checkBuilding(),\ executing\ every\ 5\ acts.\r\n
comment13.params=
comment13.target=void\ checkBuilding()
comment13.text=\r\n\ A\ method\ that\ facilitates\ the\ avoidance\ of\ Buildings.\ Changes\ the\ entity's\ direction\ when\ it\ bumps\ into\ a\ Building,\ \r\n\ keeping\ in\ mind\ other\ Buildings\ nearby,\ or\ corners.\r\n
comment14.params=
comment14.target=void\ walk()
comment14.text=\r\n\ A\ method\ that\ enables\ the\ 4-directional\ movement\ of\ Entities.\ Determines\ which\ direction\ the\ Entity\ is\ set\ to,\ \r\n\ and\ moves\ it\ along\ the\ corresponding\ direction.\ \r\n
comment15.params=
comment15.target=void\ die()
comment15.text=\r\n\ No\ return\ type\ no\ parameter\ method\ that\ deletes\ the\ Entity\ from\ the\ world\ and\ spawns\ a\ skull\ graphic\ that\ fades\ away.\r\n
comment16.params=damage
comment16.target=void\ takeDamage(double)
comment16.text=\r\n\ Mutator\ for\ the\ hp\ variable\ that\ decrements\ it\ by\ the\ parameter\ of\ damage,\ and\ updates\ their\ statbar.\r\n
comment17.params=other\ duration\ damage
comment17.target=void\ stopThenDamage(Entity,\ int,\ int)
comment17.text=\r\n\ A\ general-use\ function\ that\ makes\ the\ actor\ stop,\ then\ deal\ damage\ to\ another\ actor.\r\n\ \r\n\ @param\ other\ \ \ \ \ the\ target\ actor\ that\ you\ want\ to\ deal\ damage\ to\ \r\n\ @param\ duration\ \ the\ time\ you\ want\ the\ damaging\ actor\ to\ stop\ for\ \r\n\ @param\ damage\ \ \ \ the\ damage\ you\ want\ to\ be\ dealt\ \r\n
comment18.params=otherType\ duration\ damage
comment18.target=void\ stopThenDamage(java.lang.Class,\ int,\ int)
comment18.text=\r\n\ A\ general-use\ function\ that\ makes\ the\ actor\ stop,\ then\ deal\ damage\ to\ another\ actor\ of\ a\ specific\ actor\ type.\r\n\ Does\ not\ discriminate\ based\ on\ target,\ all\ actors\ of\ the\ other\ type\ are\ fair\ game.\r\n\ \r\n\ @param\ other\ \ \ \ \ the\ target\ class\ type\ that\ you\ want\ to\ deal\ damage\ to\ \r\n\ @param\ duration\ \ the\ time\ you\ want\ the\ damaging\ actor\ to\ stop\ for\ \r\n\ @param\ damage\ \ \ \ the\ damage\ you\ want\ to\ be\ dealt\ \r\n
comment19.params=other
comment19.target=void\ orientTowards(greenfoot.Actor)
comment19.text=\r\n\ A\ function\ that\ allows\ the\ Entity,\ which\ uses\ 4-directional\ movement,\ to\ pursue\ any\ target.\ Every\ second,\ it\ will\ also\ check\ for\ any\ \r\n\ Buildings\ in\ its\ path\ and\ ideally\ move\ out\ of\ the\ way\ before\ cycling\ back\ to\ focusing\ only\ on\ pursuing\ the\ target.\r\n\ \r\n\ @param\ other\ \ \ \ \ the\ actor\ you\ want\ to\ be\ pursued.\r\n
comment2.params=w
comment2.target=void\ addedToWorld(greenfoot.World)
comment2.text=\r\n\ Called\ when\ the\ object\ is\ added\ to\ the\ world.\ Adds\ the\ actor's\ helper\ StatBar\ to\ the\ world\ when\ the\ actor\ is\ added.\r\n
comment3.params=type\ sheetSize
comment3.target=void\ initialiseSprites(java.lang.String,\ int)
comment3.text=\r\n\ A\ useful,\ "constructor-type"\ method\ to\ initialise\ sprites.\r\n\ Helps\ with\ initialising\ sprites,\ as\ long\ as\ naming\ convention\ is\ consistent\ in\ the\ images\ folder.\r\n\ Iterates\ through\ the\ file\ system,\ consecutively\ and\ sequentially,\ based\ on\ the\ sheetSize\ parameter.\r\n\ Name\ your\ sprites\ as\ thing\#.png\ -\ for\ example,\ if\ I\ want\ to\ initialise\ the\ skeleton\ sprites,\ I\ would\ name\ each\ sprite\ "skeleton1.png"\ to,\ say,\ "skeleton8.png"\r\n\ \r\n\ @param\ type\ \ \ \ \ \ \ \ \ \ the\ prefix\ to\ the\ sprite\ name\ you\ want\ (i.e\:\ in\ a\ sprite\ name\ "man6.jpg",\ "man"\ should\ be\ passed\ as\ type)\r\n\ @param\ sheetSize\ \ \ \ \ how\ many\ sprites\ you\ want\ your\ Entity\ to\ act\ through\ -\ the\ size\ of\ the\ spriteArray.\r\n
comment4.params=
comment4.target=boolean\ validPathForward()
comment4.text=\r\n\ Checks\ if\ the\ Entity's\ forward\ movement\ causes\ them\ to\ collide\ into\ any\ Buildings,\ returns\ true\ if\ it\ does,\ false\ if\ it\ doesn't.\r\n\ \r\n
comment5.params=type\ sheetSize
comment5.target=void\ addReflectedSprites(java.lang.String,\ int)
comment5.text=\r\n\ A\ useful,\ "constructor-type"\ method\ to\ initialise\ inverted\ sprites.\r\n\ Operates\ more\ or\ less\ the\ exact\ same\ as\ the\ other\ initialiseSprites\ method,\ but\ inverts\ the\ images\ and\ adds\ it\ to\ invertedSpriteArray.\r\n\ Iterates\ through\ the\ file\ system,\ consecutively\ and\ sequentially,\ based\ on\ the\ sheetSize\ parameter.\r\n\ Name\ your\ sprites\ as\ thing\#.png\ -\ for\ example,\ if\ I\ want\ to\ initialise\ the\ skeleton\ sprites,\ I\ would\ name\ each\ sprite\ "skeleton1.png"\ to,\ say,\ "skeleton8.png"\r\n\ \r\n\ @param\ type\ \ \ \ \ \ \ \ \ \ the\ prefix\ to\ the\ sprite\ name\ you\ want\ (i.e\:\ in\ a\ sprite\ name\ "man6.jpg",\ "man"\ should\ be\ passed\ as\ type)\r\n\ @param\ sheetSize\ \ \ \ \ how\ many\ sprites\ you\ want\ your\ Entity\ to\ act\ through\ -\ the\ size\ of\ the\ spriteArray.\r\n
comment6.params=type\ sheetStart\ sheetEnd
comment6.target=void\ fullInitialiseAttackSprites(java.lang.String,\ int,\ int)
comment6.text=\r\n\ Another\ useful,\ "constructor-type"\ method\ to\ initialise\ an\ entirely\ new\ array\ of\ sprites\ meant\ to\ play\ an\ attack\ animation.\r\n\ It\ combines\ both\ initialiseSprites\ and\ addReflectedSprites\ into\ one\ method\ to\ initialise\ both\ straight\ and\ inverted\ attack\ sprites.\r\n\ Operates\ slightly\ differently\ than\ the\ former\ two\ methods,\ as\ clarified\ in\ parameters.\r\n\ If\ I\ wanted\ to\ call\ this\ to\ initialise\ the\ attack\ sprites\ of\ the\ Man,\ and\ said\ sprites\ were\ sprites\ "man6.png"\ to\ "man10.png",\ I\ would\ call\ it\ like\:\ "fullInitialiseAttackSprites("man",\ 6,\ 10);"\r\n\ \r\n\ @param\ type\ \ \ \ \ \ \ \ \ \ the\ prefix\ to\ the\ sprite\ name\ you\ want\ (i.e\:\ in\ a\ sprite\ name\ "man6.jpg",\ "man"\ should\ be\ passed\ as\ type)\r\n\ @param\ sheetStart\ \ \ \ the\ number\ in\ the\ file\ system\ of\ the\ sprite\ that\ signifies\ the\ first\ sprite\ of\ a\ full\ attack\ cycle\r\n\ @param\ sheetEnd\ \ \ \ \ \ the\ number\ in\ the\ file\ system\ of\ the\ sprite\ that\ signifies\ the\ final\ sprite\ of\ a\ full\ attack\ cycle.\r\n
comment7.params=
comment7.target=void\ movementAnimation()
comment7.text=\r\n\ A\ method\ meant\ to\ facilitate\ the\ cycling,\ or\ drawing,\ of\ movement\ sprites,\ depending\ on\ the\ entity's\ direction.\r\n
comment8.params=array\ a\ b\ c\ d
comment8.target=void\ cycle(java.util.ArrayList,\ int,\ int,\ int,\ int)
comment8.text=\r\n\ A\ method\ meant\ to\ "cycle"\ through\ a\ section\ of\ an\ array\ of\ sprites,\ and\ draw\ them\ upon\ the\ Entity\ every\ 8\ acts.\r\n\ \r\n\ @param\ array\ \ \ \ \ the\ array\ of\ images\ you\ wish\ to\ cycle\ through\r\n\ @param\ a,b,c,d,e\ four\ sequential\ indices\ of\ images\ from\ array\ you\ would\ wish\ to\ cycle\r\n
comment9.params=a\ b\ c\ d
comment9.target=void\ cycle(int,\ int,\ int,\ int)
comment9.text=\r\n\ A\ method\ meant\ to\ "cycle"\ through\ a\ section\ of\ an\ array\ of\ sprites,\ and\ draw\ them\ upon\ the\ Entity\ every\ 8\ acts.\r\n\ Overriden\ to\ cycle\ through\ spriteArray\ specifically.\r\n\ \r\n\ @param\ a,b,c,d,e\ four\ sequential\ indices\ of\ images\ from\ spriteArray\ you\ would\ wish\ to\ cycle\r\n
numComments=20
